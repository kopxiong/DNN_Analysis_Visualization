name: "nima_3d_classifier"

input: "data"
input_shape {
# batch_size
  dim: 1    
  dim: 1
  dim: 36
  dim: 36
  dim: 36
}

# ----------- Train phase data + augmentation ---------------
layer {	
    type: "CreateDeformation";
    name: "augment";
    top: "def";
    create_deformation_param {
	batch_size: 1; 
	nz: 32;
	ny: 32;
	nx: 32;
	ncomponents: 3;
	random_offset_from { v:2 v:2 v:2 };
	random_offset_to   { v:2 v:2 v:2 };
   };
};

# ----------- Apply the augmentation ---------------
layer { 
    type: "ApplyDeformation";
    name: "def_data-d0a";
    bottom: "data";
    bottom: "def";
    top: "data_aug";
    apply_deformation_param  { 
	interpolation: "nearest" #This is necessary to keep the binary values intact (255 should remain 255 always)
	extrapolation: "zero" #This is also necessary for a sensible augmentation
    };
}


# ----------- 1st layer group ---------------
layer {
  name: "conv1a"
  type: "Convolution"
  bottom: "data_aug"
  top: "conv1a"
  # learning rate and decay multipliers for the filters
  param { lr_mult: 1 decay_mult: 1 }
  # learning rate and decay multipliers for the biases
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 32
    kernel_size: 5
    pad: 0
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.1265 #sqrt(2/5^3)
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu1a"
  type: "ReLU"
  bottom: "conv1a"
  top: "conv1a"
  relu_param
    {
	negative_slope: 0.1
    }
}

# ------------- 2nd layer group --------------
layer {
  name: "conv2a"
  type: "Convolution"
  bottom: "conv1a"
  top: "conv2a"
  # learning rate and decay multipliers for the filters
  param { lr_mult: 1 decay_mult: 1 }
  # learning rate and decay multipliers for the biases
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 0
    weight_filler {
      type: "gaussian"
	      std: 0.0481 #sqrt(2/3^3/32)
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2a"
  type: "ReLU"
  bottom: "conv2a"
  top: "conv2a"
  relu_param
    {
	negative_slope: 0.1
    }
}

layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2a"
  top: "pool2a"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# ---------------- fc layers -------------
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool2a"
  top: "fc6"
  # learning rate and decay multipliers for the filters
  param { lr_mult: 1 decay_mult: 1 }
  # learning rate and decay multipliers for the biases
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output: 128
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}

layer {
  name: "fc8"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc8"
  # learning rate and decay multipliers for the filters
  param { lr_mult: 1 decay_mult: 1 }
  # learning rate and decay multipliers for the biases
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "fc8_pose"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc8_pose"
  # learning rate and decay multipliers for the filters
  param { lr_mult: 1 decay_mult: 1 }
  # learning rate and decay multipliers for the biases
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output: 105
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "prob_label"
  type: "Softmax"
  bottom: "fc8"
  top: "prob_label"
}

layer {
  name: "prob_pose"
  type: "Softmax"
  bottom: "fc8_pose"
  top: "prob_pose"
}